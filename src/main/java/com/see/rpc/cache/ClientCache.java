package com.see.rpc.cache;

import com.see.rpc.nio.Client;
import com.see.rpc.nio.base.ServerInfo;
import org.apache.commons.lang3.StringUtils;

import java.util.*;

/**
 * Created by Administrator on 2018/12/8.
 */
public class ClientCache {

    /**
     * key :  remote service name;
     * value : remote address(ip:port) collection that discovered by registry.
     */
    private static Map<String,Set<String>> serviceMap = new TreeMap<>();

    public static Map<String, Set<String>> getServiceMap() {
        return serviceMap;
    }

    public static void addService(String name){
        serviceMap.put(name,new HashSet<>());
    }

    public static void addServiceAddress(Set<String> services, String  address){
        for(Iterator<String> iterator =services.iterator();iterator.hasNext();){
            serviceMap.get(iterator.next()).add(address);
        }
    }

    public static void removeAddress(String  address){
        for(Iterator<Set<String>> iterator = serviceMap.values().iterator();iterator.hasNext();){
            iterator.next().remove(address);
        }
    }

    /**
     * clientToken. generated by serviceMap.KeySet()
     * unServedTokens. server token which is not served for current client
     */
    private static String token;
    private static Set<String> unServedTokens = new HashSet<>();

    private static String getToken() {
        if (StringUtils.isBlank(token)) {
            token = Persistent.get0("clientToken") + "";
        }
        return token;
    }

    public static void setToken(String token) {
        if(StringUtils.isBlank(token)) return;

        if(!token.equals(getToken())){
            unServedTokens.clear();
        }

        Persistent.set0("clientToken",token);
        ClientCache.token = token;
    }

    @SuppressWarnings("unchecked")
    public static Set<String> getUnServedTokens() {
        if(unServedTokens.isEmpty()) {
            Object object = Persistent.get0("unServedTokens");
            if (null != object)
                unServedTokens = (Set<String>) object;
        }
        return unServedTokens;
    }

    public static void addUnServedToken(String serverToken) {
        unServedTokens.add(serverToken);
        Persistent.set0("unServedTokens",unServedTokens);
    }

    /**
     * all connected client with the remote server info
     */
    private static Map<Client,ServerInfo> clientMap = new HashMap<>();

    public static Map<Client, ServerInfo> getClientMap() {
        return clientMap;
    }

    public static Client getClient(String address) {
        Set<Client> clients = clientMap.keySet();
        if(clients.isEmpty()) return null;
        return clients.stream().filter(cli -> cli.remoteAddress().equals(address)).findFirst().orElse(null);
    }

    public static void setServerInfo(ServerInfo serverInfo) {
        Client client = getClient(serverInfo.getAddress());
        if (null != client)
            clientMap.put(client, serverInfo);
    }

}
